name: Deploy Infrastructure

run-name: Deploy Infrastructure ${{ inputs.action }} ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - demo
          - staging
          - production

env:
  TERRAFORM_VERSION: '1.5.7'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform ${{ inputs.action }} - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Execute Terraform Action
      shell: pwsh
      run: |
        # For apply, run plan first then apply
        if ("${{ inputs.action }}" -eq "apply") {
          Write-Host "Running plan first..."
          ./deploy.ps1 `
            -Action plan `
            -Environment ${{ inputs.environment }} `
            -Location "${{ vars.AZURE_LOCATION || 'westeurope' }}" `
            -TerraformStateRG "${{ secrets.TERRAFORM_STATE_RG }}" `
            -TerraformStateSA "${{ secrets.TERRAFORM_STATE_SA }}" `
            -TerraformStateContainer "${{ secrets.TERRAFORM_STATE_CONTAINER }}"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Plan successful, proceeding with apply..."
            ./deploy.ps1 `
              -Action apply `
              -Environment ${{ inputs.environment }} `
              -Location "${{ vars.AZURE_LOCATION || 'westeurope' }}" `
              -AutoApprove `
              -TerraformStateRG "${{ secrets.TERRAFORM_STATE_RG }}" `
              -TerraformStateSA "${{ secrets.TERRAFORM_STATE_SA }}" `
              -TerraformStateContainer "${{ secrets.TERRAFORM_STATE_CONTAINER }}"
          } else {
            Write-Error "Plan failed, aborting apply"
            exit 1
          }
        } else {
          # For destroy, run directly
          ./deploy.ps1 `
            -Action ${{ inputs.action }} `
            -Environment ${{ inputs.environment }} `
            -Location "${{ vars.AZURE_LOCATION || 'westeurope' }}" `
            -AutoApprove `
            -TerraformStateRG "${{ secrets.TERRAFORM_STATE_RG }}" `
            -TerraformStateSA "${{ secrets.TERRAFORM_STATE_SA }}" `
            -TerraformStateContainer "${{ secrets.TERRAFORM_STATE_CONTAINER }}"
        }

    - name: Save Terraform Outputs
      if: inputs.action == 'apply'
      id: outputs
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq . >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Save specific outputs for other workflows
        echo "aks_cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

    - name: Get AKS Credentials
      if: inputs.action == 'apply'
      run: |
        az aks get-credentials \
          --resource-group $(terraform output -raw resource_group_name) \
          --name $(terraform output -raw cluster_name) \
          --overwrite-existing

    - name: Verify ArgoCD Installation
      if: inputs.action == 'apply'
      run: |
        echo "## ArgoCD Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n argocd >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "## ArgoCD Applications" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get applications -n argocd >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Get Load Balancer IP Addresses
      if: inputs.action == 'apply'
      run: |
        echo "## Load Balancer IP Addresses" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Wait for load balancer IPs to be assigned (up to 5 minutes)
        echo "Waiting for load balancer IPs to be assigned..." >> $GITHUB_STEP_SUMMARY
        
        # Get ArgoCD Server IP
        for i in {1..30}; do
          ARGOCD_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$ARGOCD_IP" ] && [ "$ARGOCD_IP" != "null" ]; then
            break
          fi
          echo "Waiting for ArgoCD load balancer IP... (attempt $i/30)"
          sleep 10
        done
        
        # Get Reliability Demo Web App IP
        for i in {1..30}; do
          WEB_APP_IP=$(kubectl get svc reliability-demo-web -n reliability-demo -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$WEB_APP_IP" ] && [ "$WEB_APP_IP" != "null" ]; then
            break
          fi
          echo "Waiting for Web App load balancer IP... (attempt $i/30)"
          sleep 10
        done
        
        echo "### ArgoCD Server" >> $GITHUB_STEP_SUMMARY
        if [ ! -z "$ARGOCD_IP" ] && [ "$ARGOCD_IP" != "null" ]; then
          echo "- **IP Address:** $ARGOCD_IP" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://$ARGOCD_IP" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** Load balancer IP not yet assigned" >> $GITHUB_STEP_SUMMARY
          echo "- **Access:** kubectl port-forward svc/argocd-server -n argocd 8080:443" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Reliability Demo Web App" >> $GITHUB_STEP_SUMMARY
        if [ ! -z "$WEB_APP_IP" ] && [ "$WEB_APP_IP" != "null" ]; then
          echo "- **IP Address:** $WEB_APP_IP" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** http://$WEB_APP_IP" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** Load balancer IP not yet assigned" >> $GITHUB_STEP_SUMMARY
          echo "- **Access:** kubectl port-forward svc/reliability-demo-web -n reliability-demo 8080:80" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Get ArgoCD Access Info
      if: inputs.action == 'apply'
      run: |
        echo "## ArgoCD Access Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get ArgoCD password
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "### Admin Credentials" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "Username: admin" >> $GITHUB_STEP_SUMMARY
        echo "Password: ${ARGOCD_PASSWORD}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY