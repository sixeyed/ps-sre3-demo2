name: Build and Test PR

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'helm/**'
      - '.github/workflows/**'

env:
  REGISTRY: ghcr.io
  STAGING_WEB_IMAGE_NAME: ${{ github.repository }}-staging/reliability-demo
  STAGING_WORKER_IMAGE_NAME: ${{ github.repository }}-staging/reliability-demo-worker

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for staging web image
      id: meta-web-staging
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=pr
          type=sha,prefix=pr-${{ github.event.number }}-

    - name: Extract metadata for staging worker image
      id: meta-worker-staging
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}
        tags: |
          type=ref,event=pr
          type=sha,prefix=pr-${{ github.event.number }}-

    - name: Build and push staging web image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/ReliabilityDemo/Dockerfile
        push: true
        tags: ${{ steps.meta-web-staging.outputs.tags }}
        labels: ${{ steps.meta-web-staging.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push staging worker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/ReliabilityDemo.Worker/Dockerfile
        push: true
        tags: ${{ steps.meta-worker-staging.outputs.tags }}
        labels: ${{ steps.meta-worker-staging.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm chart
      run: |
        helm lint helm/app

    - name: Validate Helm templates
      run: |
        helm template test helm/app --debug --dry-run

    - name: Check for vulnerabilities with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './src'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîç Build Results for PR #${{ github.event.number }}
            
            ‚úÖ **Staging Images Built and Pushed**
            - Web API: \`${{ env.REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}:pr-${{ github.event.number }}\`
            - Worker: \`${{ env.REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}:pr-${{ github.event.number }}\`
            
            ‚úÖ **Helm Chart Validation Passed**
            - Linting: Passed
            - Template validation: Passed
            
            ‚úÖ **Security Scan Completed**
            - Trivy vulnerability scan results uploaded
            
            üìã **Staging Environment**
            These staging images can be deployed to a staging environment for testing:
            \`\`\`bash
            # Deploy to staging with these images
            helm upgrade staging-demo ./helm/app \\
              --set web.image.repository=${{ env.REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }} \\
              --set web.image.tag=pr-${{ github.event.number }} \\
              --set worker.image.repository=${{ env.REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }} \\
              --set worker.image.tag=pr-${{ github.event.number }}
            \`\`\`
            
            üéØ **Ready for Review**
            When this PR is merged and tagged with a version (e.g., \`v1.2.3\`), the release workflow will:
            1. Build and push production images to GHCR
            2. Update Helm chart versions
            3. Trigger ArgoCD deployment to production`
          })