name: Build and Test PR

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'helm/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for ACR (demo, staging, production)'
        required: false
        default: 'production'
        type: choice
        options:
          - demo
          - staging
          - production

env:
  ACR_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  ACR_REGISTRY: reliabilitydemoacr${{ github.event.inputs.environment || 'production' }}.azurecr.io
  STAGING_WEB_IMAGE_NAME: sixeyed-staging/reliability-demo
  STAGING_WORKER_IMAGE_NAME: sixeyed-staging/reliability-demo-worker

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name reliabilitydemoacr${{ env.ACR_ENVIRONMENT }}

    - name: Extract metadata for staging web image
      id: meta-web-staging
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=pr
          type=sha,prefix=pr-${{ github.event.number }}-

    - name: Extract metadata for staging worker image
      id: meta-worker-staging
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}
        tags: |
          type=ref,event=pr
          type=sha,prefix=pr-${{ github.event.number }}-

    - name: Build and push staging web image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/ReliabilityDemo/Dockerfile
        push: true
        tags: ${{ steps.meta-web-staging.outputs.tags }}
        labels: ${{ steps.meta-web-staging.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push staging worker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/ReliabilityDemo.Worker/Dockerfile
        push: true
        tags: ${{ steps.meta-worker-staging.outputs.tags }}
        labels: ${{ steps.meta-worker-staging.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm chart
      run: |
        helm lint helm/app

    - name: Validate Helm templates
      run: |
        helm template test helm/app --debug --dry-run

    - name: Check for vulnerabilities with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './src'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Build Summary
      run: |
        echo "## 🔍 Build Results for PR #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Staging Images Built and Pushed**" >> $GITHUB_STEP_SUMMARY
        echo "- Web API: \`${{ env.ACR_REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}:pr-${{ github.event.number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Worker: \`${{ env.ACR_REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}:pr-${{ github.event.number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Helm Chart Validation Passed**" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Template validation: Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Security Scan Completed**" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy vulnerability scan results uploaded" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Staging Environment**" >> $GITHUB_STEP_SUMMARY
        echo "These staging images can be deployed to a staging environment for testing:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Deploy to staging with these images" >> $GITHUB_STEP_SUMMARY
        echo "helm upgrade staging-demo ./helm/app \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set imageRegistry.domain=${{ env.ACR_REGISTRY }} \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set imageRegistry.repository=sixeyed-staging \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set web.image.tag=pr-${{ github.event.number }} \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set worker.image.tag=pr-${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Ready for Review**" >> $GITHUB_STEP_SUMMARY
        echo "When this PR is merged and tagged with a version (e.g., \`v1.2.3\`), the release workflow will:" >> $GITHUB_STEP_SUMMARY
        echo "1. Pull staging images from ACR" >> $GITHUB_STEP_SUMMARY
        echo "2. Tag and push production images to ACR production repository" >> $GITHUB_STEP_SUMMARY
        echo "3. Update Helm chart versions" >> $GITHUB_STEP_SUMMARY
        echo "4. Trigger ArgoCD deployment to production" >> $GITHUB_STEP_SUMMARY