name: Terraform Tests

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-tests.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-tests.yml'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests (creates real resources)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  TF_VERSION: '1.5.7'
  GO_VERSION: '1.21'
  TERRATEST_PARALLELISM: 4

jobs:
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check Terraform formatting
        run: |
          cd terraform
          terraform fmt -check -recursive

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - terraform
          - terraform/modules/aks
          - terraform/modules/argocd
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd ${{ matrix.module }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd ${{ matrix.module }}
          terraform validate

  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init
        working-directory: terraform

      - name: Run TFLint
        run: tflint --recursive
        working-directory: terraform

  unit-tests:
    name: Terraform Unit Tests
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, tflint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Go modules
        run: |
          cd terraform/test
          go mod download

      - name: Run unit tests
        run: |
          cd terraform/test
          go test -v -short -timeout 30m -parallel ${{ env.TERRATEST_PARALLELISM }} ./unit/...
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  integration-tests:
    name: Terraform Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' && github.event.inputs.run_integration_tests == 'true' ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Download Go modules
        run: |
          cd terraform/test
          go mod download

      - name: Run integration tests
        run: |
          cd terraform/test
          go test -v -timeout 60m -parallel 2 ./integration/...
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          SKIP_TEARDOWN: false

      - name: Cleanup on failure
        if: failure()
        run: |
          # Clean up any resources tagged with TestID
          az group list --query "[?tags.ManagedBy=='Terratest'].name" -o tsv | xargs -I {} az group delete --name {} --yes --no-wait || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          quiet: true
          soft_fail: false
          download_external_modules: true

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Cost Estimate
        run: |
          cd terraform
          infracost breakdown --path . \
            --format json \
            --out-file /tmp/infracost.json

      - name: Post Cost Estimate to PR
        uses: infracost/infracost-action@v1
        with:
          path: /tmp/infracost.json
          github-token: ${{ secrets.GITHUB_TOKEN }}

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results/**/*.xml
            test-results/**/*.json