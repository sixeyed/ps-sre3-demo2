name: Build and Deploy Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.3
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for ACR (demo, staging, production)'
        required: false
        default: 'production'
        type: choice
        options:
          - demo
          - staging
          - production
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false
        type: string

env:
  ACR_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  ACR_REGISTRY: reliabilitydemoacr${{ github.event.inputs.environment || 'production' }}.azurecr.io
  STAGING_WEB_IMAGE_NAME: sixeyed-staging/reliability-demo
  STAGING_WORKER_IMAGE_NAME: sixeyed-staging/reliability-demo-worker
  PRODUCTION_WEB_IMAGE_NAME: sixeyed/reliability-demo
  PRODUCTION_WORKER_IMAGE_NAME: sixeyed/reliability-demo-worker

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix) or use manual input
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name reliabilitydemoacr${{ env.ACR_ENVIRONMENT }}

    - name: Find latest staging images
      id: staging
      run: |
        # Find the latest staging images in ACR by checking available tags
        echo "Finding latest staging images in ACR..."
        
        # Get the latest non-PR tag from staging web images (should be a SHA)
        LATEST_TAG=$(az acr repository show-tags --name reliabilitydemoacr${{ env.ACR_ENVIRONMENT }} --repository ${{ env.STAGING_WEB_IMAGE_NAME }} --orderby time_desc --output tsv | grep -v "^pr-" | head -1)
        
        if [ -z "$LATEST_TAG" ]; then
          echo "‚ùå No staging images found in ACR"
          echo "Available tags:"
          az acr repository show-tags --name reliabilitydemoacr${{ env.ACR_ENVIRONMENT }} --repository ${{ env.STAGING_WEB_IMAGE_NAME }} --output table
          exit 1
        fi
        
        echo "STAGING_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Found latest staging images with tag: $LATEST_TAG"

    - name: Pull staging images and push to production
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        STAGING_TAG=${{ steps.staging.outputs.STAGING_TAG }}
        
        # Pull staging images using the latest available tag
        echo "Pulling staging web image with tag: $STAGING_TAG"
        docker pull ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}:$STAGING_TAG
        
        echo "Pulling staging worker image with tag: $STAGING_TAG"
        docker pull ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}:$STAGING_TAG
        
        # Tag for production
        echo "Tagging images for production..."
        docker tag ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}:$STAGING_TAG ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:v$VERSION
        docker tag ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WEB_IMAGE_NAME }}:$STAGING_TAG ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:latest
        
        docker tag ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}:$STAGING_TAG ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:v$VERSION
        docker tag ${{ env.ACR_REGISTRY }}/${{ env.STAGING_WORKER_IMAGE_NAME }}:$STAGING_TAG ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:latest
        
        # Push production images
        echo "Pushing production web images..."
        docker push ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:v$VERSION
        docker push ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:latest
        
        echo "Pushing production worker images..."
        docker push ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:v$VERSION
        docker push ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:latest
        
        echo "‚úÖ Successfully promoted staging images to production"

    - name: Update Helm chart versions
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        
        # Update image registry domain in values.yaml
        sed -i "s|domain: \".*\"|domain: \"${{ env.ACR_REGISTRY }}\"|g" helm/app/values.yaml
        
        # Update image tags in values.yaml
        sed -i "s|tag: \".*\"|tag: \"v$VERSION\"|g" helm/app/values.yaml
        
        # Update chart version and appVersion in Chart.yaml
        sed -i "s|version: .*|version: $VERSION|g" helm/app/Chart.yaml
        sed -i "s|appVersion: \".*\"|appVersion: \"v$VERSION\"|g" helm/app/Chart.yaml
        
        echo "Updated Helm chart to version $VERSION"

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and push version updates
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Add and commit changes
        git add helm/app/values.yaml helm/app/Chart.yaml
        git commit -m "üöÄ Release v$VERSION - Update Helm chart versions

        - Updated image registry to ${{ env.ACR_REGISTRY }}
        - Updated web image tag to v$VERSION
        - Updated worker image tag to v$VERSION  
        - Updated chart version to $VERSION
        - Updated appVersion to v$VERSION
        
        Images:
        - ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:v$VERSION
        - ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:v$VERSION"
        
        # Push changes
        git push origin main
        
        echo "‚úÖ Pushed version update commit to main branch"
        echo "üéØ ArgoCD will now detect changes and deploy v$VERSION"

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## üöÄ Release ${{ github.ref_name }}
          
          ### Container Images
          - **Web API**: `${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}`
          - **Worker**: `${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}`
          
          ### Deployment
          This release has been automatically deployed via GitOps:
          1. ‚úÖ Staging images promoted to production in ACR
          2. ‚úÖ Helm chart updated with new version
          3. ‚úÖ Changes committed to main branch
          4. üîÑ ArgoCD will detect changes and deploy automatically
          
          ### Architecture
          - Multi-platform images (AMD64 + ARM64)
          - Production-ready Helm chart
          - Automatic scaling and health checks
          - Self-healing deployment via ArgoCD
          
          ### Monitoring
          Monitor the deployment in ArgoCD dashboard or using:
          ```bash
          kubectl get pods -n reliability-demo -w
          ```
        draft: false
        prerelease: false

    - name: Deployment Summary
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        echo "## üéâ Release v$VERSION Completed!"
        echo ""
        echo "### What happened:"
        echo "1. ‚úÖ Promoted staging images to production in ACR"
        echo "   - ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WEB_IMAGE_NAME }}:v$VERSION"
        echo "   - ${{ env.ACR_REGISTRY }}/${{ env.PRODUCTION_WORKER_IMAGE_NAME }}:v$VERSION"
        echo ""
        echo "2. ‚úÖ Updated Helm chart with new version"
        echo "3. ‚úÖ Committed changes to main branch"
        echo "4. ‚úÖ Created GitHub release"
        echo ""
        echo "### Next steps:"
        echo "üîÑ ArgoCD will automatically detect the changes and deploy v$VERSION"
        echo "üìä Monitor deployment in ArgoCD dashboard"
        echo "üîç Check application health at /api/health endpoint"
        echo ""
        echo "### Rollback (if needed):"
        echo "git revert HEAD && git push"