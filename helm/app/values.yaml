# Reliability Demo application configuration

# Architecture configuration
architecture:
  # Target CPU architecture: amd64 or arm64
  # Auto-detected by deployment scripts based on local Docker platform
  nodeArch: "arm64"

# Global node selector and scheduling configuration
nodeSelector: {}
tolerations: []
affinity: {}

# Web API configuration
web:
  replicaCount: 6
  image:
    repository: sixeyed/reliability-demo
    tag: "m2"
    pullPolicy: Always
  service:
    type: LoadBalancer
    port: 80  # Default port (can be overridden)
    targetPort: 8080
  ingress:
    enabled: false
    annotations: {}
    hosts: []
    tls: []
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  podDisruptionBudget:
    enabled: true
    minAvailable: 50%
  autoscaling:
    enabled: true
    minReplicas: 6
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Worker configuration
worker:
  replicaCount: 2
  image:
    repository: sixeyed/reliability-demo-worker
    tag: "m2"
    pullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  livenessProbe:
    exec:
      command:
      - /bin/sh
      - -c
      - "ps aux | grep -v grep | grep -q dotnet"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 70

# Application configuration
config:
  failureConfig:
    enabled: true
    connectionFailureRate: 0.1
    readTimeoutRate: 0.5
    writeTimeoutRate: 0.3
    slowResponseRate: 0.1
    readTimeoutMs: 1000
    writeTimeoutMs: 1000
    slowResponseDelayMs: 3000
  sqlServerDataStore:
    maxConcurrentClients: 2
    autoMigrate: true
  distributedCache:
    enabled: false
    expirationSeconds: 300
  customerOperation:
    pattern: "Direct"  # "Direct" or "Async"
  messaging:
    createCustomerQueueName: "customer_create_queue"
    updateCustomerQueueName: "customer_update_queue"
    deleteCustomerQueueName: "customer_delete_queue"
    retryAttempts: 3
    retryDelayMs: 1000

# Redis dependency configuration (Bitnami chart)
# Only needed for caching and messaging when using Async pattern
# The enabled value is automatically set by templates/redis-config.yaml based on customerOperation.pattern
redis:
  enabled: false  # Overridden by template logic based on pattern
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: false

# SQL Server configuration
sqlserver:
  enabled: true
  image:
    repository: mcr.microsoft.com/mssql/server
    tag: 2022-latest
  auth:
    saPassword: "YourStrong@Passw0rd"
  persistence:
    enabled: true
    size: 2Gi