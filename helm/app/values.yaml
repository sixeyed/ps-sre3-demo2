# Reliability Demo application configuration

# Image registry configuration
imageRegistry:
  # Container registry domain (e.g., docker.io, ghcr.io, myregistry.azurecr.io)
  domain: "docker.io"
  # Repository name (e.g., sixeyed, sixeyed-staging)
  repository: "sixeyed"

# Architecture configuration
architecture:
  # Target CPU architecture: amd64 or arm64
  nodeArch: "arm64"

# Global node selector and scheduling configuration
nodeSelector:
  kubernetes.io/arch: arm64
  nodepool: arm64
tolerations: []
affinity: {}

# Web API configuration
web:
  replicaCount: 6
  image:
    imageName: reliability-demo
    tag: "m3"
    pullPolicy: Always
  service:
    type: LoadBalancer
    port: 80
    targetPort: 8080
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  podDisruptionBudget:
    enabled: true
    minAvailable: 50%
  autoscaling:
    enabled: true
    minReplicas: 6
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Worker configuration
worker:
  replicaCount: 2
  image:
    imageName: reliability-demo-worker
    tag: "m3"
    pullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  # Worker doesn't need liveness probe - it will exit on fatal errors
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 70

# Application configuration
config:
  failureConfig:
    enabled: true
    connectionFailureRate: 0.1
    readTimeoutRate: 0.5
    writeTimeoutRate: 0.3
    slowResponseRate: 0.1
    readTimeoutMs: 1000
    writeTimeoutMs: 1000
    slowResponseDelayMs: 3000
  sqlServerDataStore:
    maxConcurrentClients: 2
    autoMigrate: true
  distributedCache:
    enabled: true
    expirationSeconds: 300
  customerOperation:
    pattern: "Async"  # "Direct" or "Async"
  messaging:
    createCustomerQueueName: "customer_create_queue"
    updateCustomerQueueName: "customer_update_queue"
    deleteCustomerQueueName: "customer_delete_queue"
    retryAttempts: 3
    retryDelayMs: 1000

# Redis dependency configuration
redis:
  enabled: true  # Enabled for async pattern and caching
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi
    # Redis requires AMD64 architecture
    nodeSelector:
      kubernetes.io/arch: amd64
      nodepool: default
  replica:
    replicaCount: 2
    persistence:
      enabled: false
    # Redis requires AMD64 architecture
    nodeSelector:
      kubernetes.io/arch: amd64
      nodepool: default

# SQL Server configuration
sqlserver:
  enabled: true
  image:
    repository: mcr.microsoft.com/mssql/server
    tag: 2022-latest
  auth:
    saPassword: "YourStrong@Passw0rd"
  persistence:
    enabled: true
    size: 2Gi