---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-customer-test-scripts
  namespace: k6
data:
  customer-load-test.js: |
    import http from 'k6/http';
    import { randomItem } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { randomString } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { check, sleep } from 'k6';

    export const options = {
      thresholds: {
        http_req_failed: ['rate<0.05'], // 5%
        http_req_duration: ['p(95) < 750'],  // 750ms
        'http_req_duration{expected_response:true}': ['p(95) <500'], // Normal responses should be fast
      },
      scenarios: {
        customer_creation: {
          executor: 'ramping-vus',
          stages: [
            { duration: '30s', target: 5 },   // Ramp up
            { duration: '2m', target: 15 },   // Steady load
            { duration: '30s', target: 25 },  // Peak load
            { duration: '1m', target: 25 },   // Sustain peak
            { duration: '30s', target: 5 },   // Ramp down
          ],
          gracefulRampDown: '10s'
        },
      },
    };

    const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Lisa', 'Chris', 'Emma', 'Alex', 'Maria', 'Robert', 'Ashley', 'James', 'Jessica', 'William'];
    const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson'];
    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'company.com', 'test.org', 'demo.net'];
    const streets = ['Main St', 'Oak Ave', 'Park Blvd', 'First St', 'Second Ave', 'Elm St', 'Maple Dr', 'Cedar Ln', 'Pine Rd', 'Broadway'];
    const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'];
    const states = ['NY', 'CA', 'IL', 'TX', 'AZ', 'PA', 'FL', 'WA', 'OH', 'NC'];

    function generateCustomerData() {
      const firstName = randomItem(firstNames);
      const lastName = randomItem(lastNames);
      const domain = randomItem(domains);
      const street = randomItem(streets);
      const city = randomItem(cities);
      const state = randomItem(states);
      
      const name = `${firstName} ${lastName}`;
      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}.${randomString(3)}@${domain}`;
      const phone = `+1-${randomIntBetween(100, 999)}-${randomIntBetween(100, 999)}-${String(randomIntBetween(1000, 9999))}`;
      const address = `${randomIntBetween(1, 9999)} ${street}, ${city}, ${state} ${String(randomIntBetween(10000, 99999))}`;
      
      return { name, email, phone, address };
    }

    export default function () {
      const baseUrl = 'http://reliability-demo.sre3-m1.svc.cluster.local:8080';
      
      // Generate random customer data
      const customer = generateCustomerData();
      
      // Create customer via API
      const createResponse = http.post(`${baseUrl}/api/customers`, JSON.stringify(customer), {
        headers: {
          'Content-Type': 'application/json',
        },
        tags: { operation: 'create_customer' },
      });
      
      const createSuccess = check(createResponse, {
        'customer creation status is 201': (r) => r.status === 201,
        'customer creation response time < 3s': (r) => r.timings.duration < 3000,
        'customer has valid ID': (r) => {
          if (r.status === 201) {
            const body = JSON.parse(r.body);
            return body.id && typeof body.id === 'number';
          }
          return true; // Skip check if request failed
        },
      });
      
      // If customer creation succeeded, try to retrieve it
      if (createSuccess && createResponse.status === 201) {
        const createdCustomer = JSON.parse(createResponse.body);
        sleep(0.1); // Small delay
        
        const getResponse = http.get(`${baseUrl}/api/customers/${createdCustomer.id}`, {
          tags: { operation: 'get_customer' },
        });
        
        check(getResponse, {
          'customer retrieval status is 200': (r) => r.status === 200,
          'customer retrieval response time < 2s': (r) => r.timings.duration < 2000,
          'retrieved customer matches created': (r) => {
            if (r.status === 200) {
              const retrieved = JSON.parse(r.body);
              return retrieved.name === customer.name && retrieved.email === customer.email;
            }
            return true; // Skip check if request failed
          },
        });
      }
      
      // Random delay between requests to simulate realistic usage
      sleep(randomIntBetween(1, 3));
    }

  customer-spike-test.js: |
    import http from 'k6/http';
    import { randomItem } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { randomString } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';
    import { check, sleep } from 'k6';

    export const options = {
      thresholds: {
        http_req_failed: ['rate<0.05'], 
        http_req_duration: ['p(95) < 500'],
      },
      scenarios: {
        spike_test: {
          executor: 'ramping-vus',
          stages: [
            { duration: '30s', target: 5 },   // Normal load
            { duration: '10s', target: 50 },  // Spike to 50 users quickly
            { duration: '30s', target: 50 },  // Sustain spike
            { duration: '10s', target: 5 },   // Quick ramp down
            { duration: '30s', target: 5 },   // Recovery period
          ],
          gracefulRampDown: '10s'
        },
      },
    };

    const firstNames = ['Test', 'Load', 'Spike', 'Demo', 'User'];
    const lastNames = ['Customer', 'User', 'Account', 'Profile', 'Record'];

    function generateSpikeCustomerData() {
      const firstName = randomItem(firstNames);
      const lastName = randomItem(lastNames);
      const timestamp = Date.now();
      
      return {
        name: `${firstName} ${lastName} ${randomString(4)}`,
        email: `spike.${timestamp}.${randomString(6)}@loadtest.com`,
        phone: `+1-555-${String(randomIntBetween(1000, 9999))}`,
        address: `${randomIntBetween(1, 999)} Spike St, Load City, TX ${String(randomIntBetween(10000, 99999))}`
      };
    }

    export default function () {
      const baseUrl = 'http://reliability-demo.sre3-m1.svc.cluster.local:8080';
      const customer = generateSpikeCustomerData();
      
      const response = http.post(`${baseUrl}/api/customers`, JSON.stringify(customer), {
        headers: {
          'Content-Type': 'application/json',
        },
        tags: { operation: 'spike_create' },
      });
      
      check(response, {
        'spike request completes': (r) => r.status !== 0,
        'spike request under 10s': (r) => r.timings.duration < 10000,
      });
      
      sleep(0.5); // Shorter sleep for spike test intensity
    }

  customer-soak-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';

    export const options = {
      thresholds: {
        http_req_failed: ['rate<0.02'], // Very low failure rate for soak test
        http_req_duration: ['p(95) < 1000'], // Consistent performance over time
        'http_req_duration{expected_response:true}': ['p(95) < 500'], // Normal responses should be fast
      },
      scenarios: {
        soak_test: {
          executor: 'constant-vus',
          vus: 10, // Modest load - 10 concurrent users
          duration: '30m', // Run for 30 minutes
          gracefulStop: '30s'
        },
      },
    };

    export default function () {
      const baseUrl = 'http://reliability-demo.sre3-m1.svc.cluster.local:8080';
      
      // Call GET /api/customers to retrieve all customers
      const response = http.get(`${baseUrl}/api/customers`, {
        tags: { operation: 'get_all_customers' },
      });
      
      check(response, {
        'get all customers status is 200': (r) => r.status === 200,
        'get all customers response time < 1s': (r) => r.timings.duration < 1000,
        'response contains customers array': (r) => {
          if (r.status === 200) {
            try {
              const customers = JSON.parse(r.body);
              return Array.isArray(customers);
            } catch (e) {
              return false;
            }
          }
          return true; // Skip check if request failed
        },
        'response body is valid JSON': (r) => {
          if (r.status === 200) {
            try {
              JSON.parse(r.body);
              return true;
            } catch (e) {
              return false;
            }
          }
          return true; // Skip check if request failed
        },
      });
      
      // Random delay between 5-15 seconds to simulate realistic user behavior
      sleep(randomIntBetween(5, 15));
    }