# Reliability Demo application configuration for GitOps

# Web API configuration
web:
  replicaCount: 6
  image:
    repository: ghcr.io/sixeyed/ps-sre3-demo2/reliability-demo
    tag: "v1.0.0"
    pullPolicy: Always
  service:
    type: LoadBalancer
    port: 8080
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/health
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  podDisruptionBudget:
    enabled: true
    minAvailable: 50%
  autoscaling:
    enabled: true
    minReplicas: 6
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Worker configuration
worker:
  replicaCount: 2
  image:
    repository: ghcr.io/sixeyed/ps-sre3-demo2/reliability-demo-worker
    tag: "v1.0.0"
    pullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  livenessProbe:
    exec:
      command:
      - /bin/sh
      - -c
      - "ps aux | grep -v grep | grep -q dotnet"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 70

# Application configuration
config:
  failureConfig:
    enabled: true
    connectionFailureRate: 0.1
    readTimeoutRate: 0.05
    writeTimeoutRate: 0.03
    slowResponseRate: 0.1
    readTimeoutMs: 1000
    writeTimeoutMs: 1000
    slowResponseDelayMs: 3000
  dataStore:
    provider: "SqlServer"  # "Redis" or "SqlServer"
  sqlServerDataStore:
    maxConcurrentClients: 10
    autoMigrate: true
  redisDataStore:
    maxConcurrentClients: 10
  distributedCache:
    enabled: true
    expirationSeconds: 300
  customerOperation:
    pattern: "Async"  # "Direct" or "Async"
  messaging:
    enabled: true
    customerChannelName: "customer_operations"
    retryAttempts: 3
    retryDelayMs: 1000

# Redis dependency configuration (Bitnami chart)
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
  replica:
    replicaCount: 1
    persistence:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"

# SQL Server configuration
sqlserver:
  enabled: true
  image:
    repository: mcr.microsoft.com/mssql/server
    tag: 2022-latest
  auth:
    saPassword: "YourStrong@Passw0rd"
  persistence:
    enabled: true
    size: 2Gi
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

# GitOps and monitoring labels
labels:
  app.kubernetes.io/name: reliability-demo
  app.kubernetes.io/instance: reliability-demo
  app.kubernetes.io/version: "m1-01"
  app.kubernetes.io/component: web-application
  app.kubernetes.io/part-of: reliability-demo
  app.kubernetes.io/managed-by: argocd

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
    - ALL

# Node selection and tolerations
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - reliability-demo
        topologyKey: kubernetes.io/hostname